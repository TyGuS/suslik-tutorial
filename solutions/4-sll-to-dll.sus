// convert a singly-linked list with reserved space in each node 
// into a doubly-linked list (in place)

predicate sll_reserved(loc x, set s) {
|  x == 0  => { s == {} ; emp }
|  x != 0  => { s == {v} + s1 ; [x, 3] ** x :-> v ** (x + 1) :-> nxt ** (x + 2) :-> 0 ** sll_reserved(nxt, s1) }
}

predicate dll(loc x, loc y, set s) {
|  x == 0  => { s == {} ; emp }
|  x != 0  => { s == {v} + s1 ; [x, 3] ** x :-> v ** (x + 1) :-> nxt ** (x + 2) :-> y ** dll(nxt, x, s1) }
}

// Convert a list with head `x` into a doubly-linked list 
// with the same elements, at the same location, and with back-pointer `prev`.
void to_dll(loc x, loc prev)
{ sll_reserved(x, s) }
{ dll(x, prev, s) }
{
  ??
}