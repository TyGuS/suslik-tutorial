// convert a singly-linked into a doubly-linked list (with memory reallocation)

predicate sll(loc x, set s) {
|  x == 0  => { s == {} ; emp }
|  x != 0  => { s == {v} + s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

predicate dll(loc x, loc y, set s) {
|  x == 0  => { s == {} ; emp }
|  x != 0  => { s == {v} + s1 ; [x, 3] ** x :-> v ** (x + 1) :-> nxt ** (x + 2) :-> y ** dll(nxt, x, s1) }
}

// Convert a list with head `x` into a doubly-linked list with the same elements; 
// store the head of the output list in `ret`
void to_dll(loc ret)
{ ret :-> x ** sll(x, s) }
{ ret :-> y ** dll(y, 0, s) }
{
  ??
}